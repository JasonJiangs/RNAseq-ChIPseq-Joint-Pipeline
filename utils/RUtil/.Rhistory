# Calculate correlation
correlation_matrix <- cor(data_norm, method = "spearman")
# save
write.csv(correlation_matrix, "result/correlation_matrix.csv")
# Visualization
heatmap:heatmap(correlation_matrix)
# advanced visualization
pheatmap::pheatmap(correlation_matrix)
# Check the column names of your data
# print(names(as.data.frame(data_norm)))
data_norm02 <- as.data.frame(data_norm)
# Replace 'Replicate1' and 'Replicate2' with your actual column names
column1 <- "LNCaP_DHT_RNA_rep1_batch"
column2 <- "LNCaP_DHT_RNA_rep2_batch"
# Check if the columns exist
if (!(column1 %in% names(data_norm02)) | !(column2 %in% names(data_norm02))) {
print(paste("Columns", column1, "and/or", column2, "not found in the data"))
} else {
# Plot the data
plot <- ggplot(data_norm02, aes_string(x=column1, y=column2)) +
geom_point() +
theme_bw() +
labs(x=paste("Expression", column1),
y=paste("Expression", column2),
title=paste("Scatter plot of", column1, "vs", column2)) +
geom_smooth(method=lm , color="red", se=FALSE)
print(plot)
# save
ggsave("result/scatter_plot01.png", plot, width = 8, height = 8)
}
column1 <- "LNCaP_Veh_RNA_rep1_batch"
column2 <- "LNCaP_Veh_RNA_rep2_batch"
# Check if the columns exist
if (!(column1 %in% names(data_norm02)) | !(column2 %in% names(data_norm02))) {
print(paste("Columns", column1, "and/or", column2, "not found in the data"))
} else {
# Plot the data
plot <- ggplot(data_norm02, aes_string(x=column1, y=column2)) +
geom_point() +
theme_bw() +
labs(x=paste("Expression", column1),
y=paste("Expression", column2),
title=paste("Scatter plot of", column1, "vs", column2)) +
geom_smooth(method=lm , color="red", se=FALSE)
print(plot)
# save
ggsave("result/scatter_plot02.png", plot, width = 8, height = 8)
}
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
library(ggplot2)
library(DESeq2)
countData <- as.matrix(read.csv("data/gene_count_matrix.csv",row.names="gene_id"))
View(countData)
View(countData)
# filter genes that have low expression
countData <- countData[rowMeans(countData)>1,]
# divide in groups: two Veh and two DHT
condition <- factor(c(rep("DHT",3),rep("Veh",3)))
View(countData)
library(DESeq2)
library(ggplot2)
countData <- as.matrix(read.csv("data/gene_count_matrix.csv",row.names="gene_id"))
# filter genes that have low expression
countData <- countData[rowMeans(countData)>1,]
# divide in groups: two Veh and two DHT
condition <- factor(c(rep("DHT",3),rep("Veh",3)))
colData <- data.frame(row.names=colnames(countData), condition)
# divide in groups: two Veh and two DHT
condition <- factor(c(rep("DHT",2),rep("Veh",2)))
colData <- data.frame(row.names=colnames(countData), condition)
View(colData)
# divide in groups: two Veh and two DHT
condition <- factor(c(rep("Replicate_DHT",2),rep("Replicate_Veh",2)))
colData <- data.frame(row.names=colnames(countData), condition)
View(colData)
# Create a DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = counts,
colData = metadata,
design = ~ condition)
# Create a DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ condition)
# check
head(dds)
# normalization
dds1 <- DESeq(dds, fitType = 'mean', minReplicatesForReplace = 7, parallel = FALSE)
#将结果用result()函数来获取
res <- results(dds1)
View(res)
summary(dds1)
summary(dds1)
summary(dds1[1])
summary(dds1)
dds1
# res格式转化：用data.frame转化为表格形式
res1 <- data.frame(res, stringsAsFactors = FALSE, check.names = FALSE)
# 依次按照pvalue值log2FoldChange值进行排序
res1 <- res1[order(res1$pvalue, res1$log2FoldChange, decreasing = c(FALSE, TRUE)), ]
# 获取padj（p值经过多重校验校正后的值）小于0.05，表达倍数取以2为对数后大于1或者小于-1的差异表达基因。
res1_up<- res1[which(res1$log2FoldChange >= 1 & res1$pvalue < 0.05),]      # 表达量显著上升的基因
res1_down<- res1[which(res1$log2FoldChange <= -1 & res1$pvalue < 0.05),]    # 表达量显著下降的基因
res1_total <- rbind(res1_up,res1_down)
View(res1_down)
#可以直接用DESeq2的plotCounts
dds <- makeExampleDESeqDataSet()
plotCounts(dds1, gene = "AT4G38770",intgroup = "condition")   # 指定某个基因
#可用ggplot对图片样式进行修改，并用ggrepel进行标注
d=data.frame(t(subset(countData,rownames(countData)=="AT4G38770")))
ggplot(d, aes(x = condition, y = AT4G38770, color = condition))+
geom_point(position=position_jitter(w=0.2,h=0))+
geom_text_repel(aes(label=rownames(d)))+
theme_bw()+
ggtitle("AT4G38770")+
theme(plot.title=element_text(hjust=0.5))
View(res1_up)
View(res1_up)
#可以直接用DESeq2的plotCounts
dds <- makeExampleDESeqDataSet()
plotCounts(dds1, gene = "HNRNPUL2|HNRNPUL2",intgroup = "condition")   # 指定某个基因
#可用ggplot对图片样式进行修改，并用ggrepel进行标注
d=data.frame(t(subset(countData,rownames(countData)=="HNRNPUL2|HNRNPUL2")))
ggplot(d, aes(x = condition, y = AT4G38770, color = condition))+
geom_point(position=position_jitter(w=0.2,h=0))+
geom_text_repel(aes(label=rownames(d)))+
theme_bw()+
ggtitle("HNRNPUL2|HNRNPUL2")+
theme(plot.title=element_text(hjust=0.5))
df <- countData[intersect(rownames(countData),rownames(res1_total)),]
# 在原表达矩阵中找到差异表达基因
df2<- as.matrix(df)
pheatmap(df2,
show_rownames = F,
show_colnames = T,
cluster_cols = F,
cluster_rows=T,
height=10,
scale = "row",
frontsize = 10,
angle_col=45,
color =colorRampPalette(c("#8854d0", "#ffffff","#fa8231"))(100),
clustering_method = 'single',
)
library(pheatmap)
pheatmap(df2,
show_rownames = F,
show_colnames = T,
cluster_cols = F,
cluster_rows=T,
height=10,
scale = "row",
frontsize = 10,
angle_col=45,
color =colorRampPalette(c("#8854d0", "#ffffff","#fa8231"))(100),
clustering_method = 'single',
)
genes<- res1
# 根据上调、下调、不变为基因添加颜色信息
genes$color <- ifelse(genes$padj<0.05 & abs(genes$log2FoldChange)>= 1,ifelse(genes$log2FoldChange > 1,'red','blue'),'gray')
color <- c(red = "red",gray = "gray",blue = "blue")
p <- ggplot(
# 指定数据、映射、颜色
genes, aes(log2FoldChange, -log10(padj), col = color)) +
geom_point() +
theme_bw() +
scale_color_manual(values = color) +
# 辅助线
labs(x="log2 (fold change)",y="-log10 (q-value)") +
geom_hline(yintercept = -log10(0.05), lty=4,col="grey",lwd=0.6) +
geom_vline(xintercept = c(-1, 1), lty=4,col="grey",lwd=0.6) +
# 图例
theme(legend.position = "none",
panel.grid=element_blank(),
axis.title = element_text(size = 16),
axis.text = element_text(size = 14)+
# 注释
geom_text_repel(
data = subset(genes, padj < 1e-100 & abs(genes$log2FoldChange) >= 10),
aes(label = rownames(genes)),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines"))
)
install.packages("ggrepel")
library(ggrepel)
p <- ggplot(
# 指定数据、映射、颜色
genes, aes(log2FoldChange, -log10(padj), col = color)) +
geom_point() +
theme_bw() +
scale_color_manual(values = color) +
# 辅助线
labs(x="log2 (fold change)",y="-log10 (q-value)") +
geom_hline(yintercept = -log10(0.05), lty=4,col="grey",lwd=0.6) +
geom_vline(xintercept = c(-1, 1), lty=4,col="grey",lwd=0.6) +
# 图例
theme(legend.position = "none",
panel.grid=element_blank(),
axis.title = element_text(size = 16),
axis.text = element_text(size = 14)+
# 注释
geom_text_repel(
data = subset(genes, padj < 1e-100 & abs(genes$log2FoldChange) >= 10),
aes(label = rownames(genes)),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines"))
)
p
countData <- as.matrix(read.csv("data/transcript_count_matrix.csv",row.names="gene_id"))
countData <- as.matrix(read.csv("data/transcript_count_matrix.csv",row.names="gene_id"))
countData <- as.matrix(read.csv("data/transcripts_count_matrix.csv",row.names="gene_id"))
countData <- as.matrix(read.csv("data/transcript_count_matrix.csv",row.names="gene_id"))
# filter genes that have low expression
countData <- countData[rowMeans(countData)>1,]
countData <- as.matrix(read.csv("data/gene_count_matrix.csv",row.names="gene_id"))
# filter genes that have low expression
countData <- countData[rowMeans(countData)>1,]
# divide in groups: two Veh and two DHT
condition <- factor(c(rep("Replicate_DHT",2),rep("Replicate_Veh",2)))
#
colData <- data.frame(row.names=colnames(countData), condition)
# Create a DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ condition)
# check
head(dds)
# Run the differential expression analysis
dds <- DESeq(dds)
# normalization
dds1 <- DESeq(dds, fitType = 'mean', minReplicatesForReplace = 7, parallel = FALSE)
#将结果用result()函数来获取
res <- results(dds1)
summary(dds1)
# res格式转化：用data.frame转化为表格形式
res1 <- data.frame(res, stringsAsFactors = FALSE, check.names = FALSE)
# 依次按照pvalue值log2FoldChange值进行排序
res1 <- res1[order(res1$pvalue, res1$log2FoldChange, decreasing = c(FALSE, TRUE)), ]
# 获取padj（p值经过多重校验校正后的值）小于0.05，表达倍数取以2为对数后大于1或者小于-1的差异表达基因。
res1_up<- res1[which(res1$log2FoldChange >= 1 & res1$pvalue < 0.05),]      # 表达量显著上升的基因
res1_down<- res1[which(res1$log2FoldChange <= -1 & res1$pvalue < 0.05),]    # 表达量显著下降的基因
res1_total <- rbind(res1_up,res1_down)
#可以直接用DESeq2的plotCounts
dds <- makeExampleDESeqDataSet()
plotCounts(dds1, gene = "HNRNPUL2|HNRNPUL2",intgroup = "condition")   # 指定某个基因
#可用ggplot对图片样式进行修改，并用ggrepel进行标注
d=data.frame(t(subset(countData,rownames(countData)=="HNRNPUL2|HNRNPUL2")))
# Load necessary libraries
library(DESeq2)
# Load the read counts data
counts <- read.csv("data/gene_count_matrix.csv", row.names = 1)
# Load the sample data
coldata <- read.csv("data/coldata.csv", row.names = 1)
# Convert the data to DESeq2 objects
dds <- DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~ condition)
# Run the differential expression analysis
dds <- DESeq(dds)
# Extract the results
res <- results(dds)
# Print the results
print(res)
# List significantly differentially expressed genes with |log2 fold change| > 1
resSig <- res[which(res$padj < 0.05 & abs(res$log2FoldChange) > 1),]
print(resSig)
# Load necessary library
library(ggplot2)
# Create a basic volcano plot
ggplot(res, aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(alpha = 0.4, size = 2) +
theme_minimal() +
labs(x = "Log2 Fold Change", y = "-Log10 Adjusted P-value", title = "Volcano Plot") +
geom_hline(yintercept = -log10(0.05), linetype="dashed", color = "firebrick") # line for p-value = 0.05
# Add a significance column to the results dataframe
res$sig <- ifelse(res$padj < 0.05 & abs(res$log2FoldChange) > 1, "Significant", "Not Significant")
# Create a volcano plot with colored points
ggplot(res, aes(x = log2FoldChange, y = -log10(padj), color = sig)) +
geom_point(alpha = 0.4, size = 2) +
scale_color_manual(values = c("Significant" = "red", "Not Significant" = "black")) +
theme_minimal() +
labs(x = "Log2 Fold Change", y = "-Log10 Adjusted P-value", title = "Volcano Plot", color = "Significance") +
geom_hline(yintercept = -log10(0.05), linetype="dashed", color = "firebrick") # line for p-value = 0.05
# convert res to data.frame
res <- as.data.frame(res)
# Add a significance column to the results dataframe
res$sig <- ifelse(res$padj < 0.05 & abs(res$log2FoldChange) > 1, "Significant", "Not Significant")
# Create a volcano plot with colored points
ggplot(res, aes(x = log2FoldChange, y = -log10(padj), color = sig)) +
geom_point(alpha = 0.4, size = 2) +
scale_color_manual(values = c("Significant" = "red", "Not Significant" = "black")) +
theme_minimal() +
labs(x = "Log2 Fold Change", y = "-Log10 Adjusted P-value", title = "Volcano Plot", color = "Significance") +
geom_hline(yintercept = -log10(0.05), linetype="dashed", color = "firebrick") # line for p-value = 0.05
# Load necessary library
library(pheatmap)
# Normalize the count data
rld <- rlog(dds)
# Extract the normalized counts
norm_counts <- assay(rld)
# Subset the normalized counts to just the differentially expressed genes
de_counts <- norm_counts[rownames(resSig),]
# Generate the heatmap
pheatmap(de_counts, annotation_col = coldata, scale = "row")
# GeneOntology Enrichment Analysis
# Load necessary libraries
library(clusterProfiler)
library(org.Hs.eg.db)
# Convert gene names to Entrez IDs
entrez_ids <- mapIds(org.Hs.eg.db, keys = rownames(resSig), column = "ENTREZID", keytype = "SYMBOL", multiVals = "first")
# Print out a few rownames
head(rownames(resSig))
View(resSig)
# Load necessary library
library(AnnotationDbi)
# Get the keys for org.Hs.eg.db
keys <- keys(org.Hs.eg.db, keytype = "SYMBOL")
# Check if the gene symbols in resSig are in keys
sum(rownames(resSig) %in% keys)
# Convert gene names to Entrez IDs
entrez_ids <- mapIds(org.Hs.eg.db, keys = rownames(resSig), column = "ENTREZID", keytype = "SYMBOL", multiVals = "first")
# Run the enrichment analysis
# Get the keys for org.Hs.eg.db
keys <- keys(org.Hs.eg.db, keytype = "SYMBOL")
print(resSig)
# Load necessary library
library(ggplot2)
# convert res to data.frame
res <- as.data.frame(res)
# Add a significance column to the results dataframe
res$sig <- ifelse(res$padj < 0.05 & abs(res$log2FoldChange) > 1, "Significant", "Not Significant")
# Create a volcano plot with colored points
ggplot(res, aes(x = log2FoldChange, y = -log10(padj), color = sig)) +
geom_point(alpha = 0.4, size = 2) +
scale_color_manual(values = c("Significant" = "red", "Not Significant" = "black")) +
theme_minimal() +
labs(x = "Log2 Fold Change", y = "-Log10 Adjusted P-value", title = "Volcano Plot", color = "Significance") +
geom_hline(yintercept = -log10(0.05), linetype="dashed", color = "firebrick") # line for p-value = 0.05
# Check if the gene symbols in resSig are in keys
sum(rownames(resSig) %in% keys)
# Convert gene names to Entrez IDs
entrez_ids <- mapIds(org.Hs.eg.db, keys = rownames(resSig), column = "ENTREZID", keytype = "SYMBOL", multiVals = "first")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
# Load necessary libraries
library(DESeq2)
# Load the read counts data
counts <- read.csv("data/gene_count_matrix.csv", row.names = 1)
# Load the sample data
coldata <- read.csv("data/coldata.csv", row.names = 1)
# Convert the data to DESeq2 objects
dds <- DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~ condition)
# Run the differential expression analysis
dds <- DESeq(dds)
# Extract the results
res <- results(dds)
# Print the results
print(res)
#save
write.csv(as.data.frame(res), file = "result/deseq2/deseq2_results.csv")
# List significantly differentially expressed genes with |log2 fold change| > 1
resSig <- res[which(res$padj < 0.05 & abs(res$log2FoldChange) > 1),]
print(resSig)
#save
write.csv(as.data.frame(resSig), file = "result/deseq2/deseq2_results_sig.csv")
# Load necessary library
library(ggplot2)
# convert res to data.frame
res <- as.data.frame(res)
# Add a significance column to the results dataframe
res$sig <- ifelse(res$padj < 0.05 & abs(res$log2FoldChange) > 1, "Significant", "Not Significant")
# Create a volcano plot with colored points
ggplot(res, aes(x = log2FoldChange, y = -log10(padj), color = sig)) +
geom_point(alpha = 0.4, size = 2) +
scale_color_manual(values = c("Significant" = "red", "Not Significant" = "black")) +
theme_minimal() +
labs(x = "Log2 Fold Change", y = "-Log10 Adjusted P-value", title = "Volcano Plot", color = "Significance") +
geom_hline(yintercept = -log10(0.05), linetype="dashed", color = "firebrick") # line for p-value = 0.05
#save
ggsave("result/deseq2/deseq2_volcano_plot.png", width = 20, height = 16, units = "in")
# Load necessary library
library(pheatmap)
# Normalize the count data
rld <- rlog(dds)
# Extract the normalized counts
norm_counts <- assay(rld)
# Subset the normalized counts to just the differentially expressed genes
de_counts <- norm_counts[rownames(resSig),]
# Generate the heatmap
pheatmap(de_counts, annotation_col = coldata, scale = "row")
#save
ggsave("result/deseq2/deseq2_heatmap.png", width = 20, height = 16, units = "in")
# GeneOntology Enrichment Analysis
#save
pheatmap:save("result/deseq2/deseq2_heatmap.png", width = 20, height = 16, units = "in")
# Load necessary libraries
library(DESeq2)
# Load the read counts data
counts <- read.csv("data/gene_count_matrix.csv", row.names = 1)
# Load the sample data
coldata <- read.csv("data/coldata.csv", row.names = 1)
# Convert the data to DESeq2 objects
dds <- DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~ condition)
# Run the differential expression analysis
dds <- DESeq(dds)
# Extract the results
res <- results(dds)
# Print the results
print(res)
#save
write.csv(as.data.frame(res), file = "result/deseq2/deseq2_results.csv")
# List significantly differentially expressed genes with |log2 fold change| > 1
resSig <- res[which(res$padj < 0.05 & abs(res$log2FoldChange) > 1),]
print(resSig)
#save
write.csv(as.data.frame(resSig), file = "result/deseq2/deseq2_results_sig.csv")
# Load necessary library
library(ggplot2)
# convert res to data.frame
res <- as.data.frame(res)
# Add a significance column to the results dataframe
res$sig <- ifelse(res$padj < 0.05 & abs(res$log2FoldChange) > 1, "Significant", "Not Significant")
# Create a volcano plot with colored points
ggplot(res, aes(x = log2FoldChange, y = -log10(padj), color = sig)) +
geom_point(alpha = 0.4, size = 2) +
scale_color_manual(values = c("Significant" = "red", "Not Significant" = "black")) +
theme_minimal() +
labs(x = "Log2 Fold Change", y = "-Log10 Adjusted P-value", title = "Volcano Plot", color = "Significance") +
geom_hline(yintercept = -log10(0.05), linetype="dashed", color = "firebrick") # line for p-value = 0.05
#save
ggsave("result/deseq2/deseq2_volcano_plot.png", width = 10, height = 8, units = "in")
# Load necessary library
library(pheatmap)
# Normalize the count data
rld <- rlog(dds)
# Extract the normalized counts
norm_counts <- assay(rld)
# Subset the normalized counts to just the differentially expressed genes
de_counts <- norm_counts[rownames(resSig),]
# Generate the heatmap
pheatmap(de_counts, annotation_col = coldata, scale = "row")
#save
pheatmap:save("result/deseq2/deseq2_heatmap.png", width = 20, height = 16, units = "in")
#save
png("result/deseq2/deseq2_heatmap.png", width = 800, height = 800)
#save
png("result/deseq2/deseq2_heatmap.png", width = 800, height = 800)
# Load necessary libraries
library(DESeq2)
# Load the read counts data
counts <- read.csv("data/gene_count_matrix.csv", row.names = 1)
# Load the sample data
coldata <- read.csv("data/coldata.csv", row.names = 1)
# Convert the data to DESeq2 objects
dds <- DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~ condition)
# Run the differential expression analysis
dds <- DESeq(dds)
# Extract the results
res <- results(dds)
# Print the results
print(res)
#save
write.csv(as.data.frame(res), file = "result/deseq2/deseq2_results.csv")
# List significantly differentially expressed genes with |log2 fold change| > 1
resSig <- res[which(res$padj < 0.05 & abs(res$log2FoldChange) > 0.5),]
print(resSig)
#save
write.csv(as.data.frame(resSig), file = "result/deseq2/deseq2_results_sig_05.csv")
# Load necessary libraries
library(DESeq2)
# Load the read counts data
counts <- read.csv("data/gene_count_matrix.csv", row.names = 1)
# Load the sample data
coldata <- read.csv("data/coldata.csv", row.names = 1)
# Convert the data to DESeq2 objects
dds <- DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~ condition)
# Run the differential expression analysis
dds <- DESeq(dds)
# Extract the results
res <- results(dds)
# Print the results
print(res)
#save
write.csv(as.data.frame(res), file = "result/deseq2/deseq2_results.csv")
# List significantly differentially expressed genes with |log2 fold change| > 1
resSig <- res[which(res$padj < 0.05 & abs(res$log2FoldChange) > 0.1),]
print(resSig)
#save
write.csv(as.data.frame(resSig), file = "result/deseq2/deseq2_results_sig_01.csv")
# Load necessary libraries
library(DESeq2)
# Load the read counts data
counts <- read.csv("data/gene_count_matrix.csv", row.names = 1)
# Load the sample data
coldata <- read.csv("data/coldata.csv", row.names = 1)
# Convert the data to DESeq2 objects
dds <- DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~ condition)
# Run the differential expression analysis
dds <- DESeq(dds)
# Extract the results
res <- results(dds)
# Print the results
print(res)
#save
write.csv(as.data.frame(res), file = "result/deseq2/deseq2_results.csv")
# List significantly differentially expressed genes with |log2 fold change| > 1
resSig <- res[which(res$padj < 0.05 & abs(res$log2FoldChange) > 0.01),]
print(resSig)
#save
write.csv(as.data.frame(resSig), file = "result/deseq2/deseq2_results_sig_001.csv")
